
moh008_lab2_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000378  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000378  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  00000410  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c19  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000927  00000000  00000000  00001121  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000616  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00002060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000518  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000223  00000000  00000000  0000268c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000028af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c4 c0       	rjmp	.+392    	; 0x1be <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	39 d1       	rcall	.+626    	; 0x336 <main>
  c4:	57 c1       	rjmp	.+686    	; 0x374 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	81 f0       	breq	.+32     	; 0xec <initUSART+0x24>
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ea:	08 95       	ret
  ec:	e9 ec       	ldi	r30, 0xC9	; 201
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
  f6:	ea ec       	ldi	r30, 0xCA	; 202
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
 100:	83 e3       	ldi	r24, 0x33	; 51
 102:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 106:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 10a:	08 95       	ret

0000010c <USART_Send>:
 10c:	61 30       	cpi	r22, 0x01	; 1
 10e:	41 f0       	breq	.+16     	; 0x120 <USART_Send+0x14>
 110:	e0 ec       	ldi	r30, 0xC0	; 192
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	90 81       	ld	r25, Z
 116:	95 ff       	sbrs	r25, 5
 118:	fd cf       	rjmp	.-6      	; 0x114 <USART_Send+0x8>
 11a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 11e:	08 95       	ret
 120:	e8 ec       	ldi	r30, 0xC8	; 200
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	95 ff       	sbrs	r25, 5
 128:	fd cf       	rjmp	.-6      	; 0x124 <USART_Send+0x18>
 12a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 12e:	08 95       	ret

00000130 <USART_Receive>:
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	41 f0       	breq	.+16     	; 0x144 <USART_Receive+0x14>
 134:	e0 ec       	ldi	r30, 0xC0	; 192
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	ec f7       	brge	.-6      	; 0x138 <USART_Receive+0x8>
 13e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 142:	08 95       	ret
 144:	e8 ec       	ldi	r30, 0xC8	; 200
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	88 23       	and	r24, r24
 14c:	ec f7       	brge	.-6      	; 0x148 <USART_Receive+0x18>
 14e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 152:	08 95       	ret

00000154 <TimerSet>:
 154:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 158:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 15c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 160:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 164:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_cntcurr>
 168:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_cntcurr+0x1>
 16c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr+0x2>
 170:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x3>
 174:	08 95       	ret

00000176 <TimerOn>:
 176:	8b e0       	ldi	r24, 0x0B	; 11
 178:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17c:	8d e7       	ldi	r24, 0x7D	; 125
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 184:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 18e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 192:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 196:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 19e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1a2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1a6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 1aa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 1ae:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 1b2:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 1b6:	8f b7       	in	r24, 0x3f	; 63
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	8f bf       	out	0x3f, r24	; 63
 1bc:	08 95       	ret

000001be <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 1d0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_cntcurr>
 1d4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x1>
 1d8:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x2>
 1dc:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x3>
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	a1 09       	sbc	r26, r1
 1e4:	b1 09       	sbc	r27, r1
 1e6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 1ea:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 1ee:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 1f2:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 1f6:	89 2b       	or	r24, r25
 1f8:	8a 2b       	or	r24, r26
 1fa:	8b 2b       	or	r24, r27
 1fc:	99 f4       	brne	.+38     	; 0x224 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 204:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 208:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 210:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 214:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 218:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 21c:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 220:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
	}
}
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <TickFct_transmit>:
unsigned char sw = 0x00;

enum Transmit_States {Receiver, send1, send0} transmit_state;
void TickFct_transmit()
{
	switch(transmit_state)
 236:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <transmit_state>
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	71 f0       	breq	.+28     	; 0x25a <TickFct_transmit+0x24>
 23e:	18 f0       	brcs	.+6      	; 0x246 <TickFct_transmit+0x10>
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	39 f1       	breq	.+78     	; 0x292 <TickFct_transmit+0x5c>
 244:	41 c0       	rjmp	.+130    	; 0x2c8 <TickFct_transmit+0x92>
	{
		case Receiver:
		if(sw == 0x00)
 246:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	09 f0       	breq	.+2      	; 0x250 <TickFct_transmit+0x1a>
 24e:	42 c0       	rjmp	.+132    	; 0x2d4 <TickFct_transmit+0x9e>
		{
			transmit_state = Receiver;
		}
		else if(sw == 0x01)
		{
			transmit_state = send1;
 250:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <transmit_state>
			cnt = 0x00;
 254:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <cnt>
 258:	46 c0       	rjmp	.+140    	; 0x2e6 <TickFct_transmit+0xb0>
		}
		break;
		
		case send1:
		if((cnt != 0x32) && (sw == 0x01)) 
 25a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cnt>
 25e:	82 33       	cpi	r24, 0x32	; 50
 260:	29 f0       	breq	.+10     	; 0x26c <TickFct_transmit+0x36>
 262:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	59 f4       	brne	.+22     	; 0x280 <TickFct_transmit+0x4a>
 26a:	3d c0       	rjmp	.+122    	; 0x2e6 <TickFct_transmit+0xb0>
		{
			transmit_state = send1;
		}
		else if((cnt == 0x32) && (sw == 0x01))
 26c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	31 f4       	brne	.+12     	; 0x280 <TickFct_transmit+0x4a>
		{
			transmit_state = send0;
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <transmit_state>
			cnt = 0x00;
 27a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <cnt>
 27e:	48 c0       	rjmp	.+144    	; 0x310 <TickFct_transmit+0xda>
		}
		else if(sw == 0x00)
 280:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 284:	81 11       	cpse	r24, r1
 286:	2f c0       	rjmp	.+94     	; 0x2e6 <TickFct_transmit+0xb0>
		{
			transmit_state = Receiver;
 288:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <transmit_state>
			cnt = 0x00;
 28c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <cnt>
 290:	21 c0       	rjmp	.+66     	; 0x2d4 <TickFct_transmit+0x9e>
		}
		break;
		
		case send0:
		if((cnt != 0x32) && (sw == 0x01))
 292:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cnt>
 296:	82 33       	cpi	r24, 0x32	; 50
 298:	29 f0       	breq	.+10     	; 0x2a4 <TickFct_transmit+0x6e>
 29a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	51 f4       	brne	.+20     	; 0x2b6 <TickFct_transmit+0x80>
 2a2:	36 c0       	rjmp	.+108    	; 0x310 <TickFct_transmit+0xda>
		{
			transmit_state = send0;
		}
		else if((cnt == 0x32) && (sw == 0x01))
 2a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	29 f4       	brne	.+10     	; 0x2b6 <TickFct_transmit+0x80>
		{
			transmit_state = send1;
 2ac:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <transmit_state>
			cnt = 0x00;
 2b0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <cnt>
 2b4:	18 c0       	rjmp	.+48     	; 0x2e6 <TickFct_transmit+0xb0>
		}
		else if(sw == 0x00)
 2b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2ba:	81 11       	cpse	r24, r1
 2bc:	29 c0       	rjmp	.+82     	; 0x310 <TickFct_transmit+0xda>
		{
			transmit_state = Receiver;
 2be:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <transmit_state>
			cnt = 0x00;
 2c2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <cnt>
 2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <TickFct_transmit+0x9e>
		
		default:
		break;
	}
	
	switch(transmit_state)
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	69 f0       	breq	.+26     	; 0x2e6 <TickFct_transmit+0xb0>
 2cc:	18 f0       	brcs	.+6      	; 0x2d4 <TickFct_transmit+0x9e>
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	89 f5       	brne	.+98     	; 0x334 <TickFct_transmit+0xfe>
 2d2:	1e c0       	rjmp	.+60     	; 0x310 <TickFct_transmit+0xda>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 2d4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	{
		case Receiver:
		if(USART_HasReceived(0))
 2d8:	88 23       	and	r24, r24
 2da:	1c f4       	brge	.+6      	; 0x2e2 <TickFct_transmit+0xac>
		{
			PORTA = USART_Receive(0);
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	28 df       	rcall	.-432    	; 0x130 <USART_Receive>
 2e0:	82 b9       	out	0x02, r24	; 2
		}
		PORTC = 0x00;
 2e2:	18 b8       	out	0x08, r1	; 8
		break;
 2e4:	08 95       	ret
		
		case send1:
		PORTC = 0x01;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	88 b9       	out	0x08, r24	; 8
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 2ea:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
		if(USART_IsSendReady(1))
 2ee:	85 ff       	sbrs	r24, 5
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <TickFct_transmit+0xc2>
		{
			USART_Send(0x01, 1);
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0a df       	rcall	.-492    	; 0x10c <USART_Send>
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 2f8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
		}
		if(USART_HasTransmitted(1))
 2fc:	86 ff       	sbrs	r24, 6
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <TickFct_transmit+0xce>
		{
			PORTA = 0x01;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	82 b9       	out	0x02, r24	; 2
		}
		cnt++;
 304:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cnt>
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <cnt>
		break;
 30e:	08 95       	ret
		
		case send0:
		PORTC = 0x01;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	88 b9       	out	0x08, r24	; 8
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 314:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
		if(USART_IsSendReady(1))
 318:	85 ff       	sbrs	r24, 5
 31a:	03 c0       	rjmp	.+6      	; 0x322 <TickFct_transmit+0xec>
		{
			USART_Send(0x00, 1);
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	f5 de       	rcall	.-534    	; 0x10c <USART_Send>
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 322:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
		}
		if(USART_HasTransmitted(1))
 326:	86 fd       	sbrc	r24, 6
		{
			PORTA = 0x00;
 328:	12 b8       	out	0x02, r1	; 2
		}
		cnt++;
 32a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cnt>
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <cnt>
 334:	08 95       	ret

00000336 <main>:
	}
}

int main(void)
{
	DDRA = 0xFF; PORTA = 0x00;
 336:	8f ef       	ldi	r24, 0xFF	; 255
 338:	81 b9       	out	0x01, r24	; 1
 33a:	12 b8       	out	0x02, r1	; 2
	DDRB = 0x00; PORTB = 0xFF;
 33c:	14 b8       	out	0x04, r1	; 4
 33e:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00;
 340:	87 b9       	out	0x07, r24	; 7
 342:	18 b8       	out	0x08, r1	; 8
	
	TimerSet(20);
 344:	64 e1       	ldi	r22, 0x14	; 20
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	03 df       	rcall	.-506    	; 0x154 <TimerSet>
	TimerOn();
 34e:	13 df       	rcall	.-474    	; 0x176 <TimerOn>
	
	initUSART(0);
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	ba de       	rcall	.-652    	; 0xc8 <initUSART>
	initUSART(1);
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	b8 de       	rcall	.-656    	; 0xc8 <initUSART>
 358:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <transmit_state>
	
	transmit_state = Receiver;
 35c:	83 b1       	in	r24, 0x03	; 3
	
    while (1) 
    {
		sw = ~PINB;
 35e:	80 95       	com	r24
 360:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		TickFct_transmit();
 364:	68 df       	rcall	.-304    	; 0x236 <TickFct_transmit>
 366:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TimerFlag>
		while(!TimerFlag){}
 36a:	88 23       	and	r24, r24
 36c:	e1 f3       	breq	.-8      	; 0x366 <main+0x30>
 36e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <TimerFlag>
		TimerFlag = 0;
 372:	f4 cf       	rjmp	.-24     	; 0x35c <main+0x26>

00000374 <_exit>:
    }
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>
